Search.setIndex({"docnames": ["TFilterPy", "TFilterPy.state_estimation", "TFilterPy.utils", "examples", "index", "modules"], "filenames": ["TFilterPy.rst", "TFilterPy.state_estimation.rst", "TFilterPy.utils.rst", "examples.rst", "index.rst", "modules.rst"], "titles": ["TFilterPy package", "TFilterPy.state_estimation package", "TFilterPy.utils package", "Examples", "tfilters Documentation", "TFilterPy"], "terms": {"state_estim": [0, 5], "linear_filt": [0, 5], "daskkalmanfilt": [0, 1, 5], "estimate_paramet": [0, 1, 2, 5], "fit": [0, 1, 5], "predict": [0, 1, 5], "run_filt": [0, 1, 5], "nonlinear_filt": [0, 5], "dasknonlinearkalmanfilt": [0, 1, 5], "particle_filt": [0, 5], "daskparticlefilt": [0, 1, 5], "estimate_st": [0, 1, 5], "resampl": [0, 1, 5], "step": [0, 1, 5], "updat": [0, 1, 5], "util": [0, 5], "optimisation_util": [0, 5], "parameterestim": [0, 1, 2], "estimate_with_adaptive_filt": [0, 2], "estimate_with_cross_valid": [0, 2], "estimate_with_ml": [0, 2], "estimate_with_residual_analysi": [0, 2], "class": [0, 1, 2], "baseestim": [0, 2, 5], "name": 0, "none": 0, "sourc": [0, 1, 2], "base": [0, 1, 2], "object": 0, "all": [0, 1], "estim": [0, 1, 2, 4], "provid": 0, "common": 0, "function": [0, 1, 2], "paramet": [0, 1, 2], "handl": 0, "valid": [0, 1, 2], "get_param": [0, 5], "deep": 0, "true": [0, 1], "get": [0, 4], "bool": 0, "If": [0, 1], "retriev": 0, "nest": 0, "return": [0, 1], "A": [0, 1, 2], "dictionari": 0, "map": [0, 1], "valu": 0, "type": [0, 1], "dict": 0, "set_param": [0, 5], "param": 0, "set": 0, "arbitrari": 0, "keyword": 0, "argument": 0, "instanc": [0, 1], "itself": 0, "self": [0, 1], "static": 0, "to_dask_arrai": [0, 5], "numpy_arrai": 0, "chunk_siz": [0, 1], "convert": 0, "numpi": 0, "arrai": [0, 1, 2], "dask": [0, 1, 4], "specifi": [0, 1, 2], "chunk": 0, "i": [0, 1, 4], "us": [0, 1, 2, 4], "": [0, 2], "automat": 0, "np": [0, 1], "ndarrai": [0, 1], "input": [0, 1], "int": [0, 1, 2], "tupl": [0, 1, 2], "option": [0, 1], "desir": 0, "size": 0, "version": 0, "da": [0, 1], "validate_matric": [0, 5], "matric": 0, "have": 0, "consist": 0, "shape": [0, 1], "matrix": [0, 1], "rais": [0, 1], "valueerror": [0, 1], "ar": [0, 1], "inconsist": 0, "python": [0, 4], "state": [0, 1, 4], "kalman": [0, 1, 2, 4], "filter": [0, 1, 2, 4], "particl": [0, 1, 4], "nonlinear": [0, 1], "state_transition_matrix": [0, 1], "observation_matrix": [0, 1], "process_noise_cov": [0, 1], "observation_noise_cov": [0, 1], "initial_st": [0, 1], "initial_covari": [0, 1], "64": [0, 1], "estimation_strategi": [0, 1, 2], "str": [0, 1, 2], "residual_analysi": [0, 1, 2], "implement": [0, 1], "support": [0, 1, 4], "distribut": [0, 1, 4], "comput": [0, 1, 4], "larg": [0, 1, 4], "dataset": [0, 1, 4], "thi": [0, 1], "extend": [0, 1], "process": [0, 1, 2, 4], "nois": [0, 1, 2], "covari": [0, 1, 2], "q": [0, 1, 2], "observ": [0, 1, 2], "r": [0, 1, 2], "while": [0, 1], "appli": [0, 1], "incom": [0, 1], "measur": [0, 1, 2], "The": [0, 1], "recurs": [0, 1], "algorithm": [0, 1], "linear": [0, 1, 4], "dynam": [0, 1], "system": [0, 1], "from": [0, 1], "noisi": [0, 1], "leverag": [0, 1, 4], "scale": [0, 1], "across": [0, 1], "n_featur": [0, 1], "transit": [0, 1], "f": [0, 1], "repres": [0, 1], "how": [0, 1, 4], "evolv": [0, 1], "between": [0, 1], "n_observ": [0, 1], "h": [0, 1], "space": [0, 1], "initi": [0, 1], "vector": [0, 1], "x0": [0, 1], "p0": [0, 1], "uncertainti": [0, 1, 4], "default": [0, 1], "strategi": [0, 1, 2], "can": [0, 1], "one": [0, 1], "mle": [0, 1, 2], "cross_valid": [0, 1], "adaptive_filt": [0, 1], "dimens": [0, 1], "do": [0, 1], "conform": [0, 1], "requir": [0, 1], "refer": [0, 1, 2, 4], "welch": [0, 1, 2], "g": [0, 1, 2], "bishop": [0, 1, 2], "1995": [0, 1, 2], "an": [0, 1, 2], "introduct": [0, 1, 2, 4], "n_timestep": [0, 1], "over": [0, 1, 2], "time": [0, 1, 2], "note": [0, 1], "method": [0, 1, 2, 4], "call": [0, 1], "appropri": [0, 1], "parent": [0, 1], "avail": [0, 1], "includ": [0, 1, 2], "residu": [0, 1, 2], "analysi": [0, 1, 2], "cross": [0, 1, 2], "adapt": [0, 1, 2], "x": [0, 1], "prepar": [0, 1], "store": [0, 1], "2": [0, 1], "dimension": [0, 1], "perform": [0, 1], "construct": [0, 1], "graph": [0, 1], "entir": [0, 1], "sequenc": [0, 1], "parallel": [0, 1], "delai": [0, 1], "execut": [0, 1], "each": [0, 1], "oper": [0, 1], "two": [0, 1], "made": [0, 1], "gain": [0, 1], "k": [0, 1, 2], "multipl": [0, 1], "timelin": [0, 1], "differ": [0, 1, 2], "innov": [0, 1, 2], "state_transit": [0, 1], "observation_model": [0, 1], "num_particl": [0, 1], "1000": [0, 1], "use_dask": [0, 1], "multivari": [0, 1], "scalabl": [0, 1, 4], "inherit": [0, 1], "5": [0, 1, 2], "weight": [0, 1], "averag": [0, 1], "propag": [0, 1], "model": [0, 1], "plu": [0, 1], "gaussian": [0, 1, 4], "4": [0, 1], "multinomi": [0, 1], "refocu": [0, 1], "high": [0, 1], "probabl": [0, 1], "routin": [0, 1], "It": [0, 1, 4], "should": [0, 1], "run": [0, 1], "both": [0, 1], "n_ob": [0, 1], "n_state": [0, 1], "predicted_measur": [0, 1], "same": [0, 1], "For": [0, 1, 4], "simpl": [0, 1], "exampl": [0, 1], "we": [0, 1], "sequenti": [0, 1], "6": [0, 1], "iter": [0, 1], "full": [0, 1], "cycl": [0, 1], "3": [0, 1], "likelihood": [0, 1, 2], "contain": 1, "maximum": 2, "haykin": 2, "2001": 2, "neural": 2, "network": 2, "k_fold": 2, "fold": 2, "max_iter": 2, "optim": 2, "packag": [4, 5], "bayesian": 4, "techniqu": 4, "allow": 4, "you": 4, "effici": 4, "robust": 4, "quantif": 4, "non": 4, "built": 4, "assess": 4, "confid": 4, "check": 4, "out": 4, "quickstart": 4, "guid": 4, "see": 4, "directori": 4, "real": 4, "world": 4, "case": 4, "jupyt": 4, "notebook": 4, "api": 4, "modul": [4, 5], "index": 4, "search": 4, "page": 4, "subpackag": 5, "submodul": 5, "content": 5, "base_estim": 5}, "objects": {"": [[0, 0, 0, "-", "TFilterPy"]], "TFilterPy": [[0, 1, 1, "", "DaskKalmanFilter"], [0, 1, 1, "", "DaskNonLinearKalmanFilter"], [0, 1, 1, "", "DaskParticleFilter"], [0, 0, 0, "-", "base_estimator"], [1, 0, 0, "-", "state_estimation"], [2, 0, 0, "-", "utils"]], "TFilterPy.DaskKalmanFilter": [[0, 2, 1, "", "estimate_parameters"], [0, 2, 1, "", "fit"], [0, 2, 1, "", "predict"], [0, 2, 1, "", "run_filter"]], "TFilterPy.DaskParticleFilter": [[0, 2, 1, "", "estimate_state"], [0, 2, 1, "", "predict"], [0, 2, 1, "", "resample"], [0, 2, 1, "", "run_filter"], [0, 2, 1, "", "step"], [0, 2, 1, "", "update"]], "TFilterPy.base_estimator": [[0, 1, 1, "", "BaseEstimator"]], "TFilterPy.base_estimator.BaseEstimator": [[0, 2, 1, "", "get_params"], [0, 2, 1, "", "set_params"], [0, 2, 1, "", "to_dask_array"], [0, 2, 1, "", "validate_matrices"]], "TFilterPy.state_estimation": [[1, 1, 1, "", "DaskKalmanFilter"], [1, 1, 1, "", "DaskNonLinearKalmanFilter"], [1, 1, 1, "", "DaskParticleFilter"], [1, 0, 0, "-", "linear_filters"], [1, 0, 0, "-", "nonlinear_filters"], [1, 0, 0, "-", "particle_filters"]], "TFilterPy.state_estimation.DaskKalmanFilter": [[1, 2, 1, "", "estimate_parameters"], [1, 2, 1, "", "fit"], [1, 2, 1, "", "predict"], [1, 2, 1, "", "run_filter"]], "TFilterPy.state_estimation.DaskParticleFilter": [[1, 2, 1, "", "estimate_state"], [1, 2, 1, "", "predict"], [1, 2, 1, "", "resample"], [1, 2, 1, "", "run_filter"], [1, 2, 1, "", "step"], [1, 2, 1, "", "update"]], "TFilterPy.state_estimation.linear_filters": [[1, 1, 1, "", "DaskKalmanFilter"]], "TFilterPy.state_estimation.linear_filters.DaskKalmanFilter": [[1, 2, 1, "", "estimate_parameters"], [1, 2, 1, "", "fit"], [1, 2, 1, "", "predict"], [1, 2, 1, "", "run_filter"]], "TFilterPy.state_estimation.nonlinear_filters": [[1, 1, 1, "", "DaskNonLinearKalmanFilter"]], "TFilterPy.state_estimation.particle_filters": [[1, 1, 1, "", "DaskParticleFilter"]], "TFilterPy.state_estimation.particle_filters.DaskParticleFilter": [[1, 2, 1, "", "estimate_state"], [1, 2, 1, "", "predict"], [1, 2, 1, "", "resample"], [1, 2, 1, "", "run_filter"], [1, 2, 1, "", "step"], [1, 2, 1, "", "update"]], "TFilterPy.utils": [[2, 1, 1, "", "ParameterEstimator"], [2, 0, 0, "-", "optimisation_utils"]], "TFilterPy.utils.ParameterEstimator": [[2, 2, 1, "", "estimate_parameters"], [2, 2, 1, "", "estimate_with_adaptive_filtering"], [2, 2, 1, "", "estimate_with_cross_validation"], [2, 2, 1, "", "estimate_with_mle"], [2, 2, 1, "", "estimate_with_residual_analysis"]], "TFilterPy.utils.optimisation_utils": [[2, 1, 1, "", "ParameterEstimator"]], "TFilterPy.utils.optimisation_utils.ParameterEstimator": [[2, 2, 1, "", "estimate_parameters"], [2, 2, 1, "", "estimate_with_adaptive_filtering"], [2, 2, 1, "", "estimate_with_cross_validation"], [2, 2, 1, "", "estimate_with_mle"], [2, 2, 1, "", "estimate_with_residual_analysis"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"]}, "titleterms": {"tfilterpi": [0, 1, 2, 4, 5], "packag": [0, 1, 2], "subpackag": 0, "submodul": [0, 1, 2], "base_estim": 0, "modul": [0, 1, 2], "content": [0, 1, 2, 4], "state_estim": 1, "linear_filt": 1, "nonlinear_filt": 1, "particle_filt": 1, "util": 2, "optimisation_util": 2, "exampl": [3, 4], "tfilter": 4, "document": 4, "welcom": 4, "": 4, "featur": 4, "quick": 4, "start": 4, "addit": 4, "resourc": 4, "indic": 4, "tabl": 4}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"TFilterPy package": [[0, "tfilterpy-package"]], "Subpackages": [[0, "subpackages"]], "Submodules": [[0, "submodules"], [1, "submodules"], [2, "submodules"]], "TFilterPy.base_estimator module": [[0, "module-TFilterPy.base_estimator"]], "Module contents": [[0, "module-TFilterPy"], [1, "module-TFilterPy.state_estimation"], [2, "module-TFilterPy.utils"]], "TFilterPy.state_estimation package": [[1, "tfilterpy-state-estimation-package"]], "TFilterPy.state_estimation.linear_filters module": [[1, "module-TFilterPy.state_estimation.linear_filters"]], "TFilterPy.state_estimation.nonlinear_filters module": [[1, "module-TFilterPy.state_estimation.nonlinear_filters"]], "TFilterPy.state_estimation.particle_filters module": [[1, "module-TFilterPy.state_estimation.particle_filters"]], "TFilterPy.utils package": [[2, "tfilterpy-utils-package"]], "TFilterPy.utils.optimisation_utils module": [[2, "module-TFilterPy.utils.optimisation_utils"]], "Examples": [[3, "examples"], [4, "examples"]], "tfilters Documentation": [[4, "tfilters-documentation"]], "Welcome to tfilterpy\u2019s documentation!": [[4, "welcome-to-tfilterpy-s-documentation"]], "Features": [[4, "features"]], "Quick Start": [[4, "quick-start"]], "Contents:": [[4, null]], "Additional Resources": [[4, "additional-resources"]], "Indices and Tables": [[4, "indices-and-tables"]], "TFilterPy": [[5, "tfilterpy"]]}, "indexentries": {"baseestimator (class in tfilterpy.base_estimator)": [[0, "TFilterPy.base_estimator.BaseEstimator"]], "daskkalmanfilter (class in tfilterpy)": [[0, "TFilterPy.DaskKalmanFilter"]], "dasknonlinearkalmanfilter (class in tfilterpy)": [[0, "TFilterPy.DaskNonLinearKalmanFilter"]], "daskparticlefilter (class in tfilterpy)": [[0, "TFilterPy.DaskParticleFilter"]], "tfilterpy": [[0, "module-TFilterPy"]], "tfilterpy.base_estimator": [[0, "module-TFilterPy.base_estimator"]], "estimate_parameters() (tfilterpy.daskkalmanfilter method)": [[0, "TFilterPy.DaskKalmanFilter.estimate_parameters"]], "estimate_state() (tfilterpy.daskparticlefilter method)": [[0, "TFilterPy.DaskParticleFilter.estimate_state"]], "fit() (tfilterpy.daskkalmanfilter method)": [[0, "TFilterPy.DaskKalmanFilter.fit"]], "get_params() (tfilterpy.base_estimator.baseestimator method)": [[0, "TFilterPy.base_estimator.BaseEstimator.get_params"]], "module": [[0, "module-TFilterPy"], [0, "module-TFilterPy.base_estimator"], [1, "module-TFilterPy.state_estimation"], [1, "module-TFilterPy.state_estimation.linear_filters"], [1, "module-TFilterPy.state_estimation.nonlinear_filters"], [1, "module-TFilterPy.state_estimation.particle_filters"], [2, "module-TFilterPy.utils"], [2, "module-TFilterPy.utils.optimisation_utils"]], "predict() (tfilterpy.daskkalmanfilter method)": [[0, "TFilterPy.DaskKalmanFilter.predict"]], "predict() (tfilterpy.daskparticlefilter method)": [[0, "TFilterPy.DaskParticleFilter.predict"]], "resample() (tfilterpy.daskparticlefilter method)": [[0, "TFilterPy.DaskParticleFilter.resample"]], "run_filter() (tfilterpy.daskkalmanfilter method)": [[0, "TFilterPy.DaskKalmanFilter.run_filter"]], "run_filter() (tfilterpy.daskparticlefilter method)": [[0, "TFilterPy.DaskParticleFilter.run_filter"]], "set_params() (tfilterpy.base_estimator.baseestimator method)": [[0, "TFilterPy.base_estimator.BaseEstimator.set_params"]], "step() (tfilterpy.daskparticlefilter method)": [[0, "TFilterPy.DaskParticleFilter.step"]], "to_dask_array() (tfilterpy.base_estimator.baseestimator static method)": [[0, "TFilterPy.base_estimator.BaseEstimator.to_dask_array"]], "update() (tfilterpy.daskparticlefilter method)": [[0, "TFilterPy.DaskParticleFilter.update"]], "validate_matrices() (tfilterpy.base_estimator.baseestimator method)": [[0, "TFilterPy.base_estimator.BaseEstimator.validate_matrices"]], "daskkalmanfilter (class in tfilterpy.state_estimation)": [[1, "TFilterPy.state_estimation.DaskKalmanFilter"]], "daskkalmanfilter (class in tfilterpy.state_estimation.linear_filters)": [[1, "TFilterPy.state_estimation.linear_filters.DaskKalmanFilter"]], "dasknonlinearkalmanfilter (class in tfilterpy.state_estimation)": [[1, "TFilterPy.state_estimation.DaskNonLinearKalmanFilter"]], "dasknonlinearkalmanfilter (class in tfilterpy.state_estimation.nonlinear_filters)": [[1, "TFilterPy.state_estimation.nonlinear_filters.DaskNonLinearKalmanFilter"]], "daskparticlefilter (class in tfilterpy.state_estimation)": [[1, "TFilterPy.state_estimation.DaskParticleFilter"]], "daskparticlefilter (class in tfilterpy.state_estimation.particle_filters)": [[1, "TFilterPy.state_estimation.particle_filters.DaskParticleFilter"]], "tfilterpy.state_estimation": [[1, "module-TFilterPy.state_estimation"]], "tfilterpy.state_estimation.linear_filters": [[1, "module-TFilterPy.state_estimation.linear_filters"]], "tfilterpy.state_estimation.nonlinear_filters": [[1, "module-TFilterPy.state_estimation.nonlinear_filters"]], "tfilterpy.state_estimation.particle_filters": [[1, "module-TFilterPy.state_estimation.particle_filters"]], "estimate_parameters() (tfilterpy.state_estimation.daskkalmanfilter method)": [[1, "TFilterPy.state_estimation.DaskKalmanFilter.estimate_parameters"]], "estimate_parameters() (tfilterpy.state_estimation.linear_filters.daskkalmanfilter method)": [[1, "TFilterPy.state_estimation.linear_filters.DaskKalmanFilter.estimate_parameters"]], "estimate_state() (tfilterpy.state_estimation.daskparticlefilter method)": [[1, "TFilterPy.state_estimation.DaskParticleFilter.estimate_state"]], "estimate_state() (tfilterpy.state_estimation.particle_filters.daskparticlefilter method)": [[1, "TFilterPy.state_estimation.particle_filters.DaskParticleFilter.estimate_state"]], "fit() (tfilterpy.state_estimation.daskkalmanfilter method)": [[1, "TFilterPy.state_estimation.DaskKalmanFilter.fit"]], "fit() (tfilterpy.state_estimation.linear_filters.daskkalmanfilter method)": [[1, "TFilterPy.state_estimation.linear_filters.DaskKalmanFilter.fit"]], "predict() (tfilterpy.state_estimation.daskkalmanfilter method)": [[1, "TFilterPy.state_estimation.DaskKalmanFilter.predict"]], "predict() (tfilterpy.state_estimation.daskparticlefilter method)": [[1, "TFilterPy.state_estimation.DaskParticleFilter.predict"]], "predict() (tfilterpy.state_estimation.linear_filters.daskkalmanfilter method)": [[1, "TFilterPy.state_estimation.linear_filters.DaskKalmanFilter.predict"]], "predict() (tfilterpy.state_estimation.particle_filters.daskparticlefilter method)": [[1, "TFilterPy.state_estimation.particle_filters.DaskParticleFilter.predict"]], "resample() (tfilterpy.state_estimation.daskparticlefilter method)": [[1, "TFilterPy.state_estimation.DaskParticleFilter.resample"]], "resample() (tfilterpy.state_estimation.particle_filters.daskparticlefilter method)": [[1, "TFilterPy.state_estimation.particle_filters.DaskParticleFilter.resample"]], "run_filter() (tfilterpy.state_estimation.daskkalmanfilter method)": [[1, "TFilterPy.state_estimation.DaskKalmanFilter.run_filter"]], "run_filter() (tfilterpy.state_estimation.daskparticlefilter method)": [[1, "TFilterPy.state_estimation.DaskParticleFilter.run_filter"]], "run_filter() (tfilterpy.state_estimation.linear_filters.daskkalmanfilter method)": [[1, "TFilterPy.state_estimation.linear_filters.DaskKalmanFilter.run_filter"]], "run_filter() (tfilterpy.state_estimation.particle_filters.daskparticlefilter method)": [[1, "TFilterPy.state_estimation.particle_filters.DaskParticleFilter.run_filter"]], "step() (tfilterpy.state_estimation.daskparticlefilter method)": [[1, "TFilterPy.state_estimation.DaskParticleFilter.step"]], "step() (tfilterpy.state_estimation.particle_filters.daskparticlefilter method)": [[1, "TFilterPy.state_estimation.particle_filters.DaskParticleFilter.step"]], "update() (tfilterpy.state_estimation.daskparticlefilter method)": [[1, "TFilterPy.state_estimation.DaskParticleFilter.update"]], "update() (tfilterpy.state_estimation.particle_filters.daskparticlefilter method)": [[1, "TFilterPy.state_estimation.particle_filters.DaskParticleFilter.update"]], "parameterestimator (class in tfilterpy.utils)": [[2, "TFilterPy.utils.ParameterEstimator"]], "parameterestimator (class in tfilterpy.utils.optimisation_utils)": [[2, "TFilterPy.utils.optimisation_utils.ParameterEstimator"]], "tfilterpy.utils": [[2, "module-TFilterPy.utils"]], "tfilterpy.utils.optimisation_utils": [[2, "module-TFilterPy.utils.optimisation_utils"]], "estimate_parameters() (tfilterpy.utils.parameterestimator method)": [[2, "TFilterPy.utils.ParameterEstimator.estimate_parameters"]], "estimate_parameters() (tfilterpy.utils.optimisation_utils.parameterestimator method)": [[2, "TFilterPy.utils.optimisation_utils.ParameterEstimator.estimate_parameters"]], "estimate_with_adaptive_filtering() (tfilterpy.utils.parameterestimator method)": [[2, "TFilterPy.utils.ParameterEstimator.estimate_with_adaptive_filtering"]], "estimate_with_adaptive_filtering() (tfilterpy.utils.optimisation_utils.parameterestimator method)": [[2, "TFilterPy.utils.optimisation_utils.ParameterEstimator.estimate_with_adaptive_filtering"]], "estimate_with_cross_validation() (tfilterpy.utils.parameterestimator method)": [[2, "TFilterPy.utils.ParameterEstimator.estimate_with_cross_validation"]], "estimate_with_cross_validation() (tfilterpy.utils.optimisation_utils.parameterestimator method)": [[2, "TFilterPy.utils.optimisation_utils.ParameterEstimator.estimate_with_cross_validation"]], "estimate_with_mle() (tfilterpy.utils.parameterestimator method)": [[2, "TFilterPy.utils.ParameterEstimator.estimate_with_mle"]], "estimate_with_mle() (tfilterpy.utils.optimisation_utils.parameterestimator method)": [[2, "TFilterPy.utils.optimisation_utils.ParameterEstimator.estimate_with_mle"]], "estimate_with_residual_analysis() (tfilterpy.utils.parameterestimator method)": [[2, "TFilterPy.utils.ParameterEstimator.estimate_with_residual_analysis"]], "estimate_with_residual_analysis() (tfilterpy.utils.optimisation_utils.parameterestimator method)": [[2, "TFilterPy.utils.optimisation_utils.ParameterEstimator.estimate_with_residual_analysis"]]}})